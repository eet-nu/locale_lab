import{Annotation as e,Facet as t,combineConfig as n,StateField as r,EditorSelection as o,Transaction as s,ChangeSet as l,ChangeDesc as c,StateEffect as a,CharCategory as i,countColumn as u,findClusterBreak as f,Text as h}from"@codemirror/state";import{EditorView as d,Direction as m}from"@codemirror/view";import{syntaxTree as p,matchBrackets as g,getIndentUnit as y,IndentContext as B,getIndentation as v,indentString as S,indentUnit as A}from"@codemirror/language";import{NodeProp as k}from"@lezer/common";const toggleComment=e=>{let t=getConfig(e.state);return t.line?w(e):!!t.block&&L(e)};function command(e,t){return({state:n,dispatch:r})=>{if(n.readOnly)return false;let o=e(t,n);if(!o)return false;r(n.update(o));return true}}const w=command(changeLineComment,0);const C=command(changeLineComment,1);const x=command(changeLineComment,2);const E=command(changeBlockComment,0);const M=command(changeBlockComment,1);const D=command(changeBlockComment,2);const L=command(((e,t)=>changeBlockComment(e,t,selectedLineRanges(t))),0);function getConfig(e,t=e.selection.main.head){let n=e.languageDataAt("commentTokens",t);return n.length?n[0]:{}}const O=50;function findBlockComment(e,{open:t,close:n},r,o){let s=e.sliceDoc(r-O,r);let l=e.sliceDoc(o,o+O);let c=/\s*$/.exec(s)[0].length,a=/^\s*/.exec(l)[0].length;let i=s.length-c;if(s.slice(i-t.length,i)==t&&l.slice(a,a+n.length)==n)return{open:{pos:r-c,margin:c&&1},close:{pos:o+a,margin:a&&1}};let u,f;if(o-r<=2*O)u=f=e.sliceDoc(r,o);else{u=e.sliceDoc(r,r+O);f=e.sliceDoc(o-O,o)}let h=/^\s*/.exec(u)[0].length,d=/\s*$/.exec(f)[0].length;let m=f.length-d-n.length;return u.slice(h,h+t.length)==t&&f.slice(m,m+n.length)==n?{open:{pos:r+h+t.length,margin:/\s/.test(u.charAt(h+t.length))?1:0},close:{pos:o-d-n.length,margin:/\s/.test(f.charAt(m-1))?1:0}}:null}function selectedLineRanges(e){let t=[];for(let n of e.selection.ranges){let r=e.doc.lineAt(n.from);let o=n.to<=r.to?r:e.doc.lineAt(n.to);let s=t.length-1;s>=0&&t[s].to>r.from?t[s].to=o.to:t.push({from:r.from,to:o.to})}return t}function changeBlockComment(e,t,n=t.selection.ranges){let r=n.map((e=>getConfig(t,e.from).block));if(!r.every((e=>e)))return null;let o=n.map(((e,n)=>findBlockComment(t,r[n],e.from,e.to)));if(2!=e&&!o.every((e=>e)))return{changes:t.changes(n.map(((e,t)=>o[t]?[]:[{from:e.from,insert:r[t].open+" "},{from:e.to,insert:" "+r[t].close}])))};if(1!=e&&o.some((e=>e))){let e=[];for(let t,n=0;n<o.length;n++)if(t=o[n]){let o=r[n],{open:s,close:l}=t;e.push({from:s.pos-o.open.length,to:s.pos+s.margin},{from:l.pos-l.margin,to:l.pos+o.close.length})}return{changes:e}}return null}function changeLineComment(e,t,n=t.selection.ranges){let r=[];let o=-1;for(let{from:e,to:s}of n){let n=r.length,l=1e9;for(let n=e;n<=s;){let c=t.doc.lineAt(n);if(c.from>o&&(e==s||s>c.from)){o=c.from;let e=getConfig(t,n).line;if(!e)continue;let s=/^\s*/.exec(c.text)[0].length;let a=s==c.length;let i=c.text.slice(s,s+e.length)==e?s:-1;s<c.text.length&&s<l&&(l=s);r.push({line:c,comment:i,token:e,indent:s,empty:a,single:false})}n=c.to+1}if(l<1e9)for(let e=n;e<r.length;e++)r[e].indent<r[e].line.text.length&&(r[e].indent=l);r.length==n+1&&(r[n].single=true)}if(2!=e&&r.some((e=>e.comment<0&&(!e.empty||e.single)))){let e=[];for(let{line:t,token:n,indent:o,empty:s,single:l}of r)!l&&s||e.push({from:t.from+o,insert:n+" "});let n=t.changes(e);return{changes:n,selection:t.selection.map(n,1)}}if(1!=e&&r.some((e=>e.comment>=0))){let e=[];for(let{line:t,comment:n,token:o}of r)if(n>=0){let r=t.from+n,s=r+o.length;" "==t.text[s-t.from]&&s++;e.push({from:r,to:s})}return{changes:e}}return null}const b=e.define();const H=e.define();const I=t.define();const T=t.define({combine(e){return n(e,{minDepth:100,newGroupDelay:500},{minDepth:Math.max,newGroupDelay:Math.min})}});function changeEnd(e){let t=0;e.iterChangedRanges(((e,n)=>t=n));return t}const R=r.define({create(){return HistoryState.empty},update(e,t){let n=t.state.facet(T);let r=t.annotation(b);if(r){let s=t.docChanged?o.single(changeEnd(t.changes)):void 0;let l=HistEvent.fromTransaction(t,s),c=r.side;let a=0==c?e.undone:e.done;a=l?updateBranch(a,a.length,n.minDepth,l):addSelection(a,t.startState.selection);return new HistoryState(0==c?r.rest:a,0==c?a:r.rest)}let l=t.annotation(H);"full"!=l&&"before"!=l||(e=e.isolate());if(false===t.annotation(s.addToHistory))return t.changes.empty?e:e.addMapping(t.changes.desc);let c=HistEvent.fromTransaction(t);let a=t.annotation(s.time),i=t.annotation(s.userEvent);c?e=e.addChanges(c,a,i,n.newGroupDelay,n.minDepth):t.selection&&(e=e.addSelection(t.startState.selection,a,i,n.newGroupDelay));"full"!=l&&"after"!=l||(e=e.isolate());return e},toJSON(e){return{done:e.done.map((e=>e.toJSON())),undone:e.undone.map((e=>e.toJSON()))}},fromJSON(e){return new HistoryState(e.done.map(HistEvent.fromJSON),e.undone.map(HistEvent.fromJSON))}});function history(e={}){return[R,T.of(e),d.domEventHandlers({beforeinput(e,t){let n="historyUndo"==e.inputType?V:"historyRedo"==e.inputType?G:null;if(!n)return false;e.preventDefault();return n(t)}})]}const N=R;function cmd(e,t){return function({state:n,dispatch:r}){if(!t&&n.readOnly)return false;let o=n.field(R,false);if(!o)return false;let s=o.pop(e,n,t);if(!s)return false;r(s);return true}}const V=cmd(0,false);const G=cmd(1,false);const J=cmd(0,true);const P=cmd(1,true);function depth(e){return function(t){let n=t.field(R,false);if(!n)return 0;let r=0==e?n.done:n.undone;return r.length-(r.length&&!r[0].changes?1:0)}}const U=depth(0);const z=depth(1);class HistEvent{constructor(e,t,n,r,o){this.changes=e;this.effects=t;this.mapped=n;this.startSelection=r;this.selectionsAfter=o}setSelAfter(e){return new HistEvent(this.changes,this.effects,this.mapped,this.startSelection,e)}toJSON(){var e,t,n;return{changes:null===(e=this.changes)||void 0===e?void 0:e.toJSON(),mapped:null===(t=this.mapped)||void 0===t?void 0:t.toJSON(),startSelection:null===(n=this.startSelection)||void 0===n?void 0:n.toJSON(),selectionsAfter:this.selectionsAfter.map((e=>e.toJSON()))}}static fromJSON(e){return new HistEvent(e.changes&&l.fromJSON(e.changes),[],e.mapped&&c.fromJSON(e.mapped),e.startSelection&&o.fromJSON(e.startSelection),e.selectionsAfter.map(o.fromJSON))}static fromTransaction(e,t){let n=q;for(let t of e.startState.facet(I)){let r=t(e);r.length&&(n=n.concat(r))}return!n.length&&e.changes.empty?null:new HistEvent(e.changes.invert(e.startState.doc),n,void 0,t||e.startState.selection,q)}static selection(e){return new HistEvent(void 0,q,void 0,void 0,e)}}function updateBranch(e,t,n,r){let o=t+1>n+20?t-n-1:0;let s=e.slice(o,t);s.push(r);return s}function isAdjacent(e,t){let n=[],r=false;e.iterChangedRanges(((e,t)=>n.push(e,t)));t.iterChangedRanges(((e,t,o,s)=>{for(let e=0;e<n.length;){let t=n[e++],l=n[e++];s>=t&&o<=l&&(r=true)}}));return r}function eqSelectionShape(e,t){return e.ranges.length==t.ranges.length&&0===e.ranges.filter(((e,n)=>e.empty!=t.ranges[n].empty)).length}function conc(e,t){return e.length?t.length?e.concat(t):e:t}const q=[];const $=200;function addSelection(e,t){if(e.length){let n=e[e.length-1];let r=n.selectionsAfter.slice(Math.max(0,n.selectionsAfter.length-$));if(r.length&&r[r.length-1].eq(t))return e;r.push(t);return updateBranch(e,e.length-1,1e9,n.setSelAfter(r))}return[HistEvent.selection([t])]}function popSelection(e){let t=e[e.length-1];let n=e.slice();n[e.length-1]=t.setSelAfter(t.selectionsAfter.slice(0,t.selectionsAfter.length-1));return n}function addMappingToBranch(e,t){if(!e.length)return e;let n=e.length,r=q;while(n){let o=mapEvent(e[n-1],t,r);if(o.changes&&!o.changes.empty||o.effects.length){let t=e.slice(0,n);t[n-1]=o;return t}t=o.mapped;n--;r=o.selectionsAfter}return r.length?[HistEvent.selection(r)]:q}function mapEvent(e,t,n){let r=conc(e.selectionsAfter.length?e.selectionsAfter.map((e=>e.map(t))):q,n);if(!e.changes)return HistEvent.selection(r);let o=e.changes.map(t),s=t.mapDesc(e.changes,true);let l=e.mapped?e.mapped.composeDesc(s):s;return new HistEvent(o,a.mapEffects(e.effects,t),l,e.startSelection.map(s),r)}const j=/^(input\.type|delete)($|\.)/;class HistoryState{constructor(e,t,n=0,r){this.done=e;this.undone=t;this.prevTime=n;this.prevUserEvent=r}isolate(){return this.prevTime?new HistoryState(this.done,this.undone):this}addChanges(e,t,n,r,o){let s=this.done,l=s[s.length-1];s=l&&l.changes&&!l.changes.empty&&e.changes&&(!n||j.test(n))&&(!l.selectionsAfter.length&&t-this.prevTime<r&&isAdjacent(l.changes,e.changes)||"input.type.compose"==n)?updateBranch(s,s.length-1,o,new HistEvent(e.changes.compose(l.changes),conc(e.effects,l.effects),l.mapped,l.startSelection,q)):updateBranch(s,s.length,o,e);return new HistoryState(s,q,t,n)}addSelection(e,t,n,r){let o=this.done.length?this.done[this.done.length-1].selectionsAfter:q;return o.length>0&&t-this.prevTime<r&&n==this.prevUserEvent&&n&&/^select($|\.)/.test(n)&&eqSelectionShape(o[o.length-1],e)?this:new HistoryState(addSelection(this.done,e),this.undone,t,n)}addMapping(e){return new HistoryState(addMappingToBranch(this.done,e),addMappingToBranch(this.undone,e),this.prevTime,this.prevUserEvent)}pop(e,t,n){let r=0==e?this.done:this.undone;if(0==r.length)return null;let o=r[r.length-1];if(n&&o.selectionsAfter.length)return t.update({selection:o.selectionsAfter[o.selectionsAfter.length-1],annotations:b.of({side:e,rest:popSelection(r)}),userEvent:0==e?"select.undo":"select.redo",scrollIntoView:true});if(o.changes){let n=1==r.length?q:r.slice(0,r.length-1);o.mapped&&(n=addMappingToBranch(n,o.mapped));return t.update({changes:o.changes,selection:o.startSelection,effects:o.effects,annotations:b.of({side:e,rest:n}),filter:false,userEvent:0==e?"undo":"redo",scrollIntoView:true})}return null}}HistoryState.empty=new HistoryState(q,q);const W=[{key:"Mod-z",run:V,preventDefault:true},{key:"Mod-y",mac:"Mod-Shift-z",run:G,preventDefault:true},{key:"Mod-u",run:J,preventDefault:true},{key:"Alt-u",mac:"Mod-Shift-u",run:P,preventDefault:true}];function updateSel(e,t){return o.create(e.ranges.map(t),e.mainIndex)}function setSel(e,t){return e.update({selection:t,scrollIntoView:true,userEvent:"select"})}function moveSel({state:e,dispatch:t},n){let r=updateSel(e.selection,n);if(r.eq(e.selection))return false;t(setSel(e,r));return true}function rangeEnd(e,t){return o.cursor(t?e.to:e.from)}function cursorByChar(e,t){return moveSel(e,(n=>n.empty?e.moveByChar(n,t):rangeEnd(n,t)))}function ltrAtCursor(e){return e.textDirectionAt(e.state.selection.main.head)==m.LTR}const cursorCharLeft=e=>cursorByChar(e,!ltrAtCursor(e));const cursorCharRight=e=>cursorByChar(e,ltrAtCursor(e));const cursorCharForward=e=>cursorByChar(e,true);const cursorCharBackward=e=>cursorByChar(e,false);function cursorByGroup(e,t){return moveSel(e,(n=>n.empty?e.moveByGroup(n,t):rangeEnd(n,t)))}const cursorGroupLeft=e=>cursorByGroup(e,!ltrAtCursor(e));const cursorGroupRight=e=>cursorByGroup(e,ltrAtCursor(e));const cursorGroupForward=e=>cursorByGroup(e,true);const cursorGroupBackward=e=>cursorByGroup(e,false);function moveBySubword(e,t,n){let r=e.state.charCategorizer(t.from);return e.moveByChar(t,n,(o=>{let s=i.Space,l=t.from;let c=false,a=false,u=false;let step=t=>{if(c)return false;l+=n?t.length:-t.length;let o,f=r(t);s==i.Space&&(s=f);if(s!=f)return false;if(s==i.Word)if(t.toLowerCase()==t){if(!n&&a)return false;u=true}else if(u){if(n)return false;c=true}else{if(a&&n&&r(o=e.state.sliceDoc(l,l+1))==i.Word&&o.toLowerCase()==o)return false;a=true}return true};step(o);return step}))}function cursorBySubword(e,t){return moveSel(e,(n=>n.empty?moveBySubword(e,n,t):rangeEnd(n,t)))}const cursorSubwordForward=e=>cursorBySubword(e,true);const cursorSubwordBackward=e=>cursorBySubword(e,false);function interestingNode(e,t,n){if(t.type.prop(n))return true;let r=t.to-t.from;return r&&(r>2||/[^\s,.;:]/.test(e.sliceDoc(t.from,t.to)))||t.firstChild}function moveBySyntax(e,t,n){let r=p(e).resolveInner(t.head);let s=n?k.closedBy:k.openedBy;for(let o=t.head;;){let t=n?r.childAfter(o):r.childBefore(o);if(!t)break;interestingNode(e,t,s)?r=t:o=n?t.to:t.from}let l,c,a=r.type.prop(s);c=a&&(l=n?g(e,r.from,1):g(e,r.to,-1))&&l.matched?n?l.end.to:l.end.from:n?r.to:r.from;return o.cursor(c,n?-1:1)}const cursorSyntaxLeft=e=>moveSel(e,(t=>moveBySyntax(e.state,t,!ltrAtCursor(e))));const cursorSyntaxRight=e=>moveSel(e,(t=>moveBySyntax(e.state,t,ltrAtCursor(e))));function cursorByLine(e,t){return moveSel(e,(n=>{if(!n.empty)return rangeEnd(n,t);let r=e.moveVertically(n,t);return r.head!=n.head?r:e.moveToLineBoundary(n,t)}))}const cursorLineUp=e=>cursorByLine(e,false);const cursorLineDown=e=>cursorByLine(e,true);function cursorByPage(e,t){let{state:n}=e,r=updateSel(n.selection,(n=>n.empty?e.moveVertically(n,t,Math.min(e.dom.clientHeight,innerHeight)):rangeEnd(n,t)));if(r.eq(n.selection))return false;let o=e.coordsAtPos(n.selection.main.head);let s=e.scrollDOM.getBoundingClientRect();let l;o&&o.top>s.top&&o.bottom<s.bottom&&o.top-s.top<=e.scrollDOM.scrollHeight-e.scrollDOM.scrollTop-e.scrollDOM.clientHeight&&(l=d.scrollIntoView(r.main.head,{y:"start",yMargin:o.top-s.top}));e.dispatch(setSel(n,r),{effects:l});return true}const cursorPageUp=e=>cursorByPage(e,false);const cursorPageDown=e=>cursorByPage(e,true);function moveByLineBoundary(e,t,n){let r=e.lineBlockAt(t.head),s=e.moveToLineBoundary(t,n);s.head==t.head&&s.head!=(n?r.to:r.from)&&(s=e.moveToLineBoundary(t,n,false));if(!n&&s.head==r.from&&r.length){let n=/^\s*/.exec(e.state.sliceDoc(r.from,Math.min(r.from+100,r.to)))[0].length;n&&t.head!=r.from+n&&(s=o.cursor(r.from+n))}return s}const cursorLineBoundaryForward=e=>moveSel(e,(t=>moveByLineBoundary(e,t,true)));const cursorLineBoundaryBackward=e=>moveSel(e,(t=>moveByLineBoundary(e,t,false)));const cursorLineStart=e=>moveSel(e,(t=>o.cursor(e.lineBlockAt(t.head).from,1)));const cursorLineEnd=e=>moveSel(e,(t=>o.cursor(e.lineBlockAt(t.head).to,-1)));function toMatchingBracket(e,t,n){let r=false,s=updateSel(e.selection,(t=>{let s=g(e,t.head,-1)||g(e,t.head,1)||t.head>0&&g(e,t.head-1,1)||t.head<e.doc.length&&g(e,t.head+1,-1);if(!s||!s.end)return t;r=true;let l=s.start.from==t.head?s.end.to:s.end.from;return n?o.range(t.anchor,l):o.cursor(l)}));if(!r)return false;t(setSel(e,s));return true}const cursorMatchingBracket=({state:e,dispatch:t})=>toMatchingBracket(e,t,false);const selectMatchingBracket=({state:e,dispatch:t})=>toMatchingBracket(e,t,true);function extendSel(e,t){let n=updateSel(e.state.selection,(e=>{let n=t(e);return o.range(e.anchor,n.head,n.goalColumn)}));if(n.eq(e.state.selection))return false;e.dispatch(setSel(e.state,n));return true}function selectByChar(e,t){return extendSel(e,(n=>e.moveByChar(n,t)))}const selectCharLeft=e=>selectByChar(e,!ltrAtCursor(e));const selectCharRight=e=>selectByChar(e,ltrAtCursor(e));const selectCharForward=e=>selectByChar(e,true);const selectCharBackward=e=>selectByChar(e,false);function selectByGroup(e,t){return extendSel(e,(n=>e.moveByGroup(n,t)))}const selectGroupLeft=e=>selectByGroup(e,!ltrAtCursor(e));const selectGroupRight=e=>selectByGroup(e,ltrAtCursor(e));const selectGroupForward=e=>selectByGroup(e,true);const selectGroupBackward=e=>selectByGroup(e,false);function selectBySubword(e,t){return extendSel(e,(n=>moveBySubword(e,n,t)))}const selectSubwordForward=e=>selectBySubword(e,true);const selectSubwordBackward=e=>selectBySubword(e,false);const selectSyntaxLeft=e=>extendSel(e,(t=>moveBySyntax(e.state,t,!ltrAtCursor(e))));const selectSyntaxRight=e=>extendSel(e,(t=>moveBySyntax(e.state,t,ltrAtCursor(e))));function selectByLine(e,t){return extendSel(e,(n=>e.moveVertically(n,t)))}const selectLineUp=e=>selectByLine(e,false);const selectLineDown=e=>selectByLine(e,true);function selectByPage(e,t){return extendSel(e,(n=>e.moveVertically(n,t,Math.min(e.dom.clientHeight,innerHeight))))}const selectPageUp=e=>selectByPage(e,false);const selectPageDown=e=>selectByPage(e,true);const selectLineBoundaryForward=e=>extendSel(e,(t=>moveByLineBoundary(e,t,true)));const selectLineBoundaryBackward=e=>extendSel(e,(t=>moveByLineBoundary(e,t,false)));const selectLineStart=e=>extendSel(e,(t=>o.cursor(e.lineBlockAt(t.head).from)));const selectLineEnd=e=>extendSel(e,(t=>o.cursor(e.lineBlockAt(t.head).to)));const cursorDocStart=({state:e,dispatch:t})=>{t(setSel(e,{anchor:0}));return true};const cursorDocEnd=({state:e,dispatch:t})=>{t(setSel(e,{anchor:e.doc.length}));return true};const selectDocStart=({state:e,dispatch:t})=>{t(setSel(e,{anchor:e.selection.main.anchor,head:0}));return true};const selectDocEnd=({state:e,dispatch:t})=>{t(setSel(e,{anchor:e.selection.main.anchor,head:e.doc.length}));return true};const selectAll=({state:e,dispatch:t})=>{t(e.update({selection:{anchor:0,head:e.doc.length},userEvent:"select"}));return true};const selectLine=({state:e,dispatch:t})=>{let n=selectedLineBlocks(e).map((({from:t,to:n})=>o.range(t,Math.min(n+1,e.doc.length))));t(e.update({selection:o.create(n),userEvent:"select"}));return true};const selectParentSyntax=({state:e,dispatch:t})=>{let n=updateSel(e.selection,(t=>{var n;let r=p(e).resolveInner(t.head,1);while(!(r.from<t.from&&r.to>=t.to||r.to>t.to&&r.from<=t.from||!(null===(n=r.parent)||void 0===n?void 0:n.parent)))r=r.parent;return o.range(r.to,r.from)}));t(setSel(e,n));return true};const simplifySelection=({state:e,dispatch:t})=>{let n=e.selection,r=null;n.ranges.length>1?r=o.create([n.main]):n.main.empty||(r=o.create([o.cursor(n.main.head)]));if(!r)return false;t(setSel(e,r));return true};function deleteBy({state:e,dispatch:t},n){if(e.readOnly)return false;let r="delete.selection";let s=e.changeByRange((e=>{let{from:t,to:s}=e;if(t==s){let e=n(t);e<t?r="delete.backward":e>t&&(r="delete.forward");t=Math.min(t,e);s=Math.max(s,e)}return t==s?{range:e}:{changes:{from:t,to:s},range:o.cursor(t)}}));if(s.changes.empty)return false;t(e.update(s,{scrollIntoView:true,userEvent:r}));return true}function skipAtomic(e,t,n){if(e instanceof d)for(let r of e.state.facet(d.atomicRanges).map((t=>t(e))))r.between(t,t,((e,r)=>{e<t&&r>t&&(t=n?r:e)}));return t}const deleteByChar=(e,t)=>deleteBy(e,(n=>{let r,o,{state:s}=e,l=s.doc.lineAt(n);if(!t&&n>l.from&&n<l.from+200&&!/[^ \t]/.test(r=l.text.slice(0,n-l.from))){if("\t"==r[r.length-1])return n-1;let e=u(r,s.tabSize),t=e%y(s)||y(s);for(let e=0;e<t&&" "==r[r.length-1-e];e++)n--;o=n}else{o=f(l.text,n-l.from,t,t)+l.from;o==n&&l.number!=(t?s.doc.lines:1)&&(o+=t?1:-1)}return skipAtomic(e,o,t)}));const deleteCharBackward=e=>deleteByChar(e,false);const deleteCharForward=e=>deleteByChar(e,true);const deleteByGroup=(e,t)=>deleteBy(e,(n=>{let r=n,{state:o}=e,s=o.doc.lineAt(r);let l=o.charCategorizer(r);for(let e=null;;){if(r==(t?s.to:s.from)){r==n&&s.number!=(t?o.doc.lines:1)&&(r+=t?1:-1);break}let c=f(s.text,r-s.from,t)+s.from;let a=s.text.slice(Math.min(r,c)-s.from,Math.max(r,c)-s.from);let i=l(a);if(null!=e&&i!=e)break;" "==a&&r==n||(e=i);r=c}return skipAtomic(e,r,t)}));const deleteGroupBackward=e=>deleteByGroup(e,false);const deleteGroupForward=e=>deleteByGroup(e,true);const deleteToLineEnd=e=>deleteBy(e,(t=>{let n=e.lineBlockAt(t).to;return skipAtomic(e,t<n?n:Math.min(e.state.doc.length,t+1),true)}));const deleteToLineStart=e=>deleteBy(e,(t=>{let n=e.lineBlockAt(t).from;return skipAtomic(e,t>n?n:Math.max(0,t-1),false)}));const deleteTrailingWhitespace=({state:e,dispatch:t})=>{if(e.readOnly)return false;let n=[];for(let t=0,r="",o=e.doc.iter();;){o.next();if(o.lineBreak||o.done){let e=r.search(/\s+$/);e>-1&&n.push({from:t-(r.length-e),to:t});if(o.done)break;r=""}else r=o.value;t+=o.value.length}if(!n.length)return false;t(e.update({changes:n,userEvent:"delete"}));return true};const splitLine=({state:e,dispatch:t})=>{if(e.readOnly)return false;let n=e.changeByRange((e=>({changes:{from:e.from,to:e.to,insert:h.of(["",""])},range:o.cursor(e.from)})));t(e.update(n,{scrollIntoView:true,userEvent:"input"}));return true};const transposeChars=({state:e,dispatch:t})=>{if(e.readOnly)return false;let n=e.changeByRange((t=>{if(!t.empty||0==t.from||t.from==e.doc.length)return{range:t};let n=t.from,r=e.doc.lineAt(n);let s=n==r.from?n-1:f(r.text,n-r.from,false)+r.from;let l=n==r.to?n+1:f(r.text,n-r.from,true)+r.from;return{changes:{from:s,to:l,insert:e.doc.slice(n,l).append(e.doc.slice(s,n))},range:o.cursor(l)}}));if(n.changes.empty)return false;t(e.update(n,{scrollIntoView:true,userEvent:"move.character"}));return true};function selectedLineBlocks(e){let t=[],n=-1;for(let r of e.selection.ranges){let o=e.doc.lineAt(r.from),s=e.doc.lineAt(r.to);r.empty||r.to!=s.from||(s=e.doc.lineAt(r.to-1));if(n>=o.number){let e=t[t.length-1];e.to=s.to;e.ranges.push(r)}else t.push({from:o.from,to:s.to,ranges:[r]});n=s.number+1}return t}function moveLine(e,t,n){if(e.readOnly)return false;let r=[],s=[];for(let t of selectedLineBlocks(e)){if(n?t.to==e.doc.length:0==t.from)continue;let l=e.doc.lineAt(n?t.to+1:t.from-1);let c=l.length+1;if(n){r.push({from:t.to,to:l.to},{from:t.from,insert:l.text+e.lineBreak});for(let n of t.ranges)s.push(o.range(Math.min(e.doc.length,n.anchor+c),Math.min(e.doc.length,n.head+c)))}else{r.push({from:l.from,to:t.from},{from:t.to,insert:e.lineBreak+l.text});for(let e of t.ranges)s.push(o.range(e.anchor-c,e.head-c))}}if(!r.length)return false;t(e.update({changes:r,scrollIntoView:true,selection:o.create(s,e.selection.mainIndex),userEvent:"move.line"}));return true}const moveLineUp=({state:e,dispatch:t})=>moveLine(e,t,false);const moveLineDown=({state:e,dispatch:t})=>moveLine(e,t,true);function copyLine(e,t,n){if(e.readOnly)return false;let r=[];for(let t of selectedLineBlocks(e))n?r.push({from:t.from,insert:e.doc.slice(t.from,t.to)+e.lineBreak}):r.push({from:t.to,insert:e.lineBreak+e.doc.slice(t.from,t.to)});t(e.update({changes:r,scrollIntoView:true,userEvent:"input.copyline"}));return true}const copyLineUp=({state:e,dispatch:t})=>copyLine(e,t,false);const copyLineDown=({state:e,dispatch:t})=>copyLine(e,t,true);const deleteLine=e=>{if(e.state.readOnly)return false;let{state:t}=e,n=t.changes(selectedLineBlocks(t).map((({from:e,to:n})=>{e>0?e--:n<t.doc.length&&n++;return{from:e,to:n}})));let r=updateSel(t.selection,(t=>e.moveVertically(t,true))).map(n);e.dispatch({changes:n,selection:r,scrollIntoView:true,userEvent:"delete.line"});return true};const insertNewline=({state:e,dispatch:t})=>{t(e.update(e.replaceSelection(e.lineBreak),{scrollIntoView:true,userEvent:"input"}));return true};function isBetweenBrackets(e,t){if(/\(\)|\[\]|\{\}/.test(e.sliceDoc(t-1,t+1)))return{from:t,to:t};let n=p(e).resolveInner(t);let r,o=n.childBefore(t),s=n.childAfter(t);return o&&s&&o.to<=t&&s.from>=t&&(r=o.type.prop(k.closedBy))&&r.indexOf(s.name)>-1&&e.doc.lineAt(o.to).from==e.doc.lineAt(s.from).from?{from:o.to,to:s.from}:null}const F=newlineAndIndent(false);const K=newlineAndIndent(true);function newlineAndIndent(e){return({state:t,dispatch:n})=>{if(t.readOnly)return false;let r=t.changeByRange((n=>{let{from:r,to:s}=n,l=t.doc.lineAt(r);let c=!e&&r==s&&isBetweenBrackets(t,r);e&&(r=s=(s<=l.to?l:t.doc.lineAt(s)).to);let a=new B(t,{simulateBreak:r,simulateDoubleBreak:!!c});let i=v(a,r);null==i&&(i=/^\s*/.exec(t.doc.lineAt(r).text)[0].length);while(s<l.to&&/\s/.test(l.text[s-l.from]))s++;c?({from:r,to:s}=c):r>l.from&&r<l.from+100&&!/\S/.test(l.text.slice(0,r))&&(r=l.from);let u=["",S(t,i)];c&&u.push(S(t,a.lineIndent(l.from,-1)));return{changes:{from:r,to:s,insert:h.of(u)},range:o.cursor(r+1+u[1].length)}}));n(t.update(r,{scrollIntoView:true,userEvent:"input"}));return true}}function changeBySelectedLine(e,t){let n=-1;return e.changeByRange((r=>{let s=[];for(let o=r.from;o<=r.to;){let l=e.doc.lineAt(o);if(l.number>n&&(r.empty||r.to>l.from)){t(l,s,r);n=l.number}o=l.to+1}let l=e.changes(s);return{changes:s,range:o.range(l.mapPos(r.anchor,1),l.mapPos(r.head,1))}}))}const indentSelection=({state:e,dispatch:t})=>{if(e.readOnly)return false;let n=Object.create(null);let r=new B(e,{overrideIndentation:e=>{let t=n[e];return null==t?-1:t}});let o=changeBySelectedLine(e,((t,o,s)=>{let l=v(r,t.from);if(null==l)return;/\S/.test(t.text)||(l=0);let c=/^\s*/.exec(t.text)[0];let a=S(e,l);if(c!=a||s.from<t.from+c.length){n[t.from]=l;o.push({from:t.from,to:t.from+c.length,insert:a})}}));o.changes.empty||t(e.update(o,{userEvent:"indent"}));return true};const indentMore=({state:e,dispatch:t})=>{if(e.readOnly)return false;t(e.update(changeBySelectedLine(e,((t,n)=>{n.push({from:t.from,insert:e.facet(A)})})),{userEvent:"input.indent"}));return true};const indentLess=({state:e,dispatch:t})=>{if(e.readOnly)return false;t(e.update(changeBySelectedLine(e,((t,n)=>{let r=/^\s*/.exec(t.text)[0];if(!r)return;let o=u(r,e.tabSize),s=0;let l=S(e,Math.max(0,o-y(e)));while(s<r.length&&s<l.length&&r.charCodeAt(s)==l.charCodeAt(s))s++;n.push({from:t.from+s,to:t.from+r.length,insert:l.slice(s)})})),{userEvent:"delete.dedent"}));return true};const insertTab=({state:e,dispatch:t})=>{if(e.selection.ranges.some((e=>!e.empty)))return indentMore({state:e,dispatch:t});t(e.update(e.replaceSelection("\t"),{scrollIntoView:true,userEvent:"input"}));return true};const Q=[{key:"Ctrl-b",run:cursorCharLeft,shift:selectCharLeft,preventDefault:true},{key:"Ctrl-f",run:cursorCharRight,shift:selectCharRight},{key:"Ctrl-p",run:cursorLineUp,shift:selectLineUp},{key:"Ctrl-n",run:cursorLineDown,shift:selectLineDown},{key:"Ctrl-a",run:cursorLineStart,shift:selectLineStart},{key:"Ctrl-e",run:cursorLineEnd,shift:selectLineEnd},{key:"Ctrl-d",run:deleteCharForward},{key:"Ctrl-h",run:deleteCharBackward},{key:"Ctrl-k",run:deleteToLineEnd},{key:"Ctrl-Alt-h",run:deleteGroupBackward},{key:"Ctrl-o",run:splitLine},{key:"Ctrl-t",run:transposeChars},{key:"Ctrl-v",run:cursorPageDown}];const X=[{key:"ArrowLeft",run:cursorCharLeft,shift:selectCharLeft,preventDefault:true},{key:"Mod-ArrowLeft",mac:"Alt-ArrowLeft",run:cursorGroupLeft,shift:selectGroupLeft},{mac:"Cmd-ArrowLeft",run:cursorLineBoundaryBackward,shift:selectLineBoundaryBackward},{key:"ArrowRight",run:cursorCharRight,shift:selectCharRight,preventDefault:true},{key:"Mod-ArrowRight",mac:"Alt-ArrowRight",run:cursorGroupRight,shift:selectGroupRight},{mac:"Cmd-ArrowRight",run:cursorLineBoundaryForward,shift:selectLineBoundaryForward},{key:"ArrowUp",run:cursorLineUp,shift:selectLineUp,preventDefault:true},{mac:"Cmd-ArrowUp",run:cursorDocStart,shift:selectDocStart},{mac:"Ctrl-ArrowUp",run:cursorPageUp,shift:selectPageUp},{key:"ArrowDown",run:cursorLineDown,shift:selectLineDown,preventDefault:true},{mac:"Cmd-ArrowDown",run:cursorDocEnd,shift:selectDocEnd},{mac:"Ctrl-ArrowDown",run:cursorPageDown,shift:selectPageDown},{key:"PageUp",run:cursorPageUp,shift:selectPageUp},{key:"PageDown",run:cursorPageDown,shift:selectPageDown},{key:"Home",run:cursorLineBoundaryBackward,shift:selectLineBoundaryBackward,preventDefault:true},{key:"Mod-Home",run:cursorDocStart,shift:selectDocStart},{key:"End",run:cursorLineBoundaryForward,shift:selectLineBoundaryForward,preventDefault:true},{key:"Mod-End",run:cursorDocEnd,shift:selectDocEnd},{key:"Enter",run:F},{key:"Mod-a",run:selectAll},{key:"Backspace",run:deleteCharBackward,shift:deleteCharBackward},{key:"Delete",run:deleteCharForward},{key:"Mod-Backspace",mac:"Alt-Backspace",run:deleteGroupBackward},{key:"Mod-Delete",mac:"Alt-Delete",run:deleteGroupForward},{mac:"Mod-Backspace",run:deleteToLineStart},{mac:"Mod-Delete",run:deleteToLineEnd}].concat(Q.map((e=>({mac:e.key,run:e.run,shift:e.shift}))));const Y=[{key:"Alt-ArrowLeft",mac:"Ctrl-ArrowLeft",run:cursorSyntaxLeft,shift:selectSyntaxLeft},{key:"Alt-ArrowRight",mac:"Ctrl-ArrowRight",run:cursorSyntaxRight,shift:selectSyntaxRight},{key:"Alt-ArrowUp",run:moveLineUp},{key:"Shift-Alt-ArrowUp",run:copyLineUp},{key:"Alt-ArrowDown",run:moveLineDown},{key:"Shift-Alt-ArrowDown",run:copyLineDown},{key:"Escape",run:simplifySelection},{key:"Mod-Enter",run:K},{key:"Alt-l",mac:"Ctrl-l",run:selectLine},{key:"Mod-i",run:selectParentSyntax,preventDefault:true},{key:"Mod-[",run:indentLess},{key:"Mod-]",run:indentMore},{key:"Mod-Alt-\\",run:indentSelection},{key:"Shift-Mod-k",run:deleteLine},{key:"Shift-Mod-\\",run:cursorMatchingBracket},{key:"Mod-/",run:toggleComment},{key:"Alt-A",run:E}].concat(X);const Z={key:"Tab",run:indentMore,shift:indentLess};export{M as blockComment,D as blockUncomment,copyLineDown,copyLineUp,cursorCharBackward,cursorCharForward,cursorCharLeft,cursorCharRight,cursorDocEnd,cursorDocStart,cursorGroupBackward,cursorGroupForward,cursorGroupLeft,cursorGroupRight,cursorLineBoundaryBackward,cursorLineBoundaryForward,cursorLineDown,cursorLineEnd,cursorLineStart,cursorLineUp,cursorMatchingBracket,cursorPageDown,cursorPageUp,cursorSubwordBackward,cursorSubwordForward,cursorSyntaxLeft,cursorSyntaxRight,Y as defaultKeymap,deleteCharBackward,deleteCharForward,deleteGroupBackward,deleteGroupForward,deleteLine,deleteToLineEnd,deleteToLineStart,deleteTrailingWhitespace,Q as emacsStyleKeymap,history,N as historyField,W as historyKeymap,indentLess,indentMore,indentSelection,Z as indentWithTab,K as insertBlankLine,insertNewline,F as insertNewlineAndIndent,insertTab,I as invertedEffects,H as isolateHistory,C as lineComment,x as lineUncomment,moveLineDown,moveLineUp,G as redo,z as redoDepth,P as redoSelection,selectAll,selectCharBackward,selectCharForward,selectCharLeft,selectCharRight,selectDocEnd,selectDocStart,selectGroupBackward,selectGroupForward,selectGroupLeft,selectGroupRight,selectLine,selectLineBoundaryBackward,selectLineBoundaryForward,selectLineDown,selectLineEnd,selectLineStart,selectLineUp,selectMatchingBracket,selectPageDown,selectPageUp,selectParentSyntax,selectSubwordBackward,selectSubwordForward,selectSyntaxLeft,selectSyntaxRight,simplifySelection,splitLine,X as standardKeymap,E as toggleBlockComment,L as toggleBlockCommentByLine,toggleComment,w as toggleLineComment,transposeChars,V as undo,U as undoDepth,J as undoSelection};

